
	************************************
    *  Consumer - Predicate - Supplier *
	************************************

   Consumer Functional interface:
   ===============================

-- Consumer<T> is an in built functional interface introduced in Java8.

-- Consumer can be used in all contexts where an obkject needs to be consumed

-- i.e. taken as input, and some operation is to be performed on the object without returning any result

-- Performs this option on given argument

-- @param t is the input argument

-- void accept(T t);

	Predicate Functional interface:
	===============================

-- Predicate is a functional interface used for conditional check

-- i.e. when we need to return a boolean

-- @param t is the input argument

-- boolean Test(T t);

	Supplier Functional interface
	===============================

-- Supplier can be used in all contexts where there is no input but an output is expected

-- Gets a result

-- @return a result

-- T get();

	Stream API
    ==========
    
- Stream API is used to process collections of objects
  A stream is a sequence of objects that supports various mathods which can be pipelined to produce the desired result
  
- A stream is not a data structure instead it takes input from the Collections, Arrays, or I/O channels
- Streams don't change the original data structure, they only provide the result as per the pipelined methods.
	
	Map and FlatMap
	===============
	
- Java8 Stream API provides map() and flatMap() method. 
- Both these methods are intermediate methods and returns another streams as part of the output

- map() method used for transformation.
- flatMap() used for transformation & flattening
- flatMap() -> map() + flattening

	map() method -> Data transformation
	====================================
- map takes Stream<T> as input and returns Stream<R>
- Stream<R> map(Stream<T> input){}
- It's mapper function produces single value for each input value hence it is alos called One-To-One Mapping

	flatMap() method -> map() + Flattening
	======================================
- flatMap() takes Stream<Stream<T>> as input and return Stream<R>
- Stream<R> map(Stream<Stream<T>> input){}
- It's mapper function produces multiple values for each input value,
  hence it os said to have One-To-Many mapping

	
  Data Trasformation and Flattening
  =================================

- Data transformation means converting or changing every element of a stream to some other element thereby creating
  a whole new stream
  Example
  Stream.of("a", "b", "c", "d") --> [A, B, C, D]

- Flattening is to convert stream of stream into single stream
- [[1,2],[3,4],[5,6],[7,8]] --> [1, 2, 3, 4, 5, 6, 7, 8]
	
  Difference between Java8 Map() and FlatMap():
  =============================================
  	
  				map()									|						flatMap()
  ------------------------------------------------------|-----------------------------------------------------------------
  It process stream of values.							|		It processes stream of stream of values
  It does only mapping									|		It performs mapping as well as flatenning
  It's mapper function produces single values for		|		It's mapper function produces multiple values for each 
  each input value.										|		input value.		
  It is a one-to-one mapping							| 		It is a One-to-Many Mapping
  Data Trasformation: From Stream to Stream				|		Data Trasformation: From Stream<Stream> to Stream
  Use this method when the mapper function is producing |		Use this method when the mapper function is producing 
  a single value for each input value.					|		multiple values for each input value.
	
	
  Map-Reduce
  =========
  
- Map-Reduce is a functional programming model
- It serves 2 purposes:
  Map => Transforming Data
  Reduce => Aggregating Data
  (combine elements of a stream and produces a single value)
  Ex. Stream: [2, 4, 6, 9, 1, 3, 7] --> Sum of numbers present in a stream
  
- Map() -> Transform Stream<Object> to Stream of int
- Reduce() -> Combine stream of int and produce the sum result


  Reduce method
  =============
- T reduce(T identity, BinaryOperator<T> accumalator):
- identity is initial value of type T
- accumalotr is a function for combining two values

  Integer sumResult = Stream.of(2, 4,  6, 9, 1, 3, 7)
  						.reduce(0, (a, b) -> a + b);
  						
  Identity : 0 which means no initial value
  Accumalator : (a, b) -> a + b is the function to be performed
  
  What is Java Parallel Streams?
  
- Java Parallel Streams is a feature of Java 8, it is meant for utilizing multiple cores of a processor
- Order of execution, is not however in out control


  
	
	
	
	
	
	
	
	
	
	
	
	



